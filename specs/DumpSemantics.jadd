import semantic.*;

aspect DumpSemenantics {

	// Returns the class name without the package prefix
	public String ASTNode.simpleClassName() {
		String name = getClass().getName();
		String[] splitname = name.split("[.]");
		return splitname[splitname.length-1];
	}

	public void ASTNode.dumpSemantics(java.io.PrintStream pStream) { dumpSemantics("", pStream); }
	public void ASTNode.dumpSemantics(String indent, java.io.PrintStream pStream) {
	    pStream.println(indent + simpleClassName() + tokenValue());
	    String childIndent = indent + "  ";
	    for(int i = 0; i < getNumChild(); i++)
	    	getChild(i).dumpSemantics(childIndent, pStream);
	}
   
	public String ASTNode.tokenValue() { return ""; }
  
	public String IdUse.tokenValue() { return " " + getId().getID() + " " + startLineCol() + " -> " +
	        (decl() != null ? decl().simpleClassName() + ": " + decl().tokenValue() : "Missing Declaration"); }
	public String IdDecl.tokenValue() { return ": " + getId().getID() + " : " + type() + " : " + startLineCol(); }
  
	public String FuncCall.tokenValue() { return " " + getId().getID() + " " + startLineCol() + " -> " +
	        (decl() != null ? decl().simpleClassName() + ": " + decl().tokenValue() : "Missing Declaration"); }
	public String Procedure.tokenValue() { return ": " + id() + " : " + type() + " : " + startLineCol(); }
	public String Numeral.tokenValue() { return "Constant: " + getNUMERAL(); }
	public String Bool.tokenValue() { return "Constant: " + getBOOL(); }
  
}