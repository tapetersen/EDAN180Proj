import semantic.*;

aspect TypeAnalysis {

	public void Start.typeAnalysis(Semantic s) {
		super.typeAnalysis(s);
	}
	
	void ASTNode.typeAnalysis(Semantic s) {
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).typeAnalysis(s);
		}
	}
	
	void IdDecl.typeAnalysis(Semantic s) {
		if(hasExpr())
			if(getExpr().type() != type())
				s.addError( new TypeError("var: "+this.id()+" has type: "+type()+" found: "+getExpr().type(), beginLine()));
	}
	
	public void UnExpr.typeAnalysis(Semantic s) {
		if(getOperand().type() != argtype())
			s.addError( new TypeError("expected type: "+argtype()+" found: "+getOperand().type(), beginLine()));
		super.typeAnalysis(s);
	}
	
	public void Assgn.typeAnalysis(Semantic s) {
		if(getExpr().type() != getIdUse().type())
			s.addError( new TypeError("var: "+getIdUse().decl().id()+" has type: "+getIdUse().type()+" found: "+getExpr().type(), beginLine()));
		super.typeAnalysis(s);
	}
	
	public void BinExpr.typeAnalysis(Semantic s) {
		if(getLeft().type() != argtype())
			s.addError( new TypeError("expected leftoperand type: "+argtype()+" found: "+getLeft().type(), beginLine()));
		if(getRight().type() != argtype())
			s.addError( new TypeError("expected leftoperand type: "+argtype()+" found: "+getRight().type(), beginLine()));
		super.typeAnalysis(s);
	}
	
	public void Procedure.typeAnalysis(Semantic s) {
		retAnalysis(s);
		super.typeAnalysis(s);
	}
	public void FuncCall.typeAnalysis(Semantic s) {
		if(getNumArg() != decl().getNumParam()) {
			s.addError( new TypeError(""+decl()+" called with wrong number of params.", beginLine()));
			return;
		}
		for(int i=0; i<getNumArg(); i++) {
			if(getArg(i).type() != decl().getParam(i).type())
				s.addError( new TypeError("Param " + i + " type mismatch.", beginLine()));
		}
	}
	
	public void Ret.typeAnalysis(Semantic s) {
		// Just typecheck, other stuff handled by RetTanalysis
		if(!hasExpr() && proc().hasType())
			s.addError( new TypeError("return with expression from function without type", beginLine()));
		if(hasExpr() && !proc().hasType())
			s.addError( new TypeError("return without expression from function with type", beginLine()));
		if(hasExpr() && getExpr().type() != proc().type())
			s.addError( new TypeError("return with "+ getExpr().type()+" expression from function with "+proc.type()+" type.", beginLine()));
	}
	
	private SemType Procedure.type = null;
	public SemType Procedure.type() {
		if(hasType())
			return SemType.fromString(getType().getTYPE());
		return SemType.NONE;
	}
	
	public SemType IdUse.type() {
		return decl().type();
	}
	
	public abstract SemType Expr.type();
	public abstract SemType BinExpr.argtype();
	public abstract SemType UnExpr.argtype();

	private SemType IdDecl.type = null;	
	public SemType IdDecl.type() {
		if(type == null)
			type = SemType.fromString(getType().getTYPE()); 
		return type;
	}
	
	public SemType FuncCall.type() { return decl().type(); }
	public SemType Numeral.type() { return SemType.INTEGER; }
	public SemType Read.type() { return SemType.INTEGER; }
	public SemType Bool.type() { return SemType.BOOL; }
	public SemType Add.type() { return SemType.INTEGER; }
	public SemType Sub.type() { return SemType.INTEGER; }
	public SemType Div.type() { return SemType.INTEGER; }
	public SemType Mul.type() { return SemType.INTEGER; }
	public SemType Neg.type() { return SemType.INTEGER; }
	public SemType And.type() { return SemType.BOOL; }
	public SemType Or.type() { return SemType.BOOL; }
	public SemType Not.type() { return SemType.BOOL; }
	public SemType Lt.type() { return SemType.BOOL; }
	public SemType Lte.type() { return SemType.BOOL; }
	public SemType Gt.type() { return SemType.BOOL; }
	public SemType Gte.type() { return SemType.BOOL; }
	public SemType Eq.type() { return SemType.BOOL; }
	public SemType Neq.type() { return SemType.BOOL; }
	
	public SemType Add.argtype() { return SemType.INTEGER; }
	public SemType Sub.argtype() { return SemType.INTEGER; }
	public SemType Div.argtype() { return SemType.INTEGER; }
	public SemType Mul.argtype() { return SemType.INTEGER; }
	public SemType Neg.argtype() { return SemType.INTEGER; }
	public SemType And.argtype() { return SemType.BOOL; }
	public SemType Or.argtype() { return SemType.BOOL; }
	public SemType Not.argtype() { return SemType.BOOL; }
	public SemType Lt.argtype() { return SemType.INTEGER; }
	public SemType Lte.argtype() { return SemType.INTEGER; }
	public SemType Gt.argtype() { return SemType.INTEGER; }
	public SemType Gte.argtype() { return SemType.INTEGER; }
	public SemType Eq.argtype() { return SemType.INTEGER; }
	public SemType Neq.argtype() { return SemType.INTEGER; }
	
}