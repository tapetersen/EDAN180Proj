import icode.*;
import util.*;
import java.util.ArrayList;
aspect CodeGenerator {

	public void Start.genCode(Code code, Semantic s) {
		for(Procedure p : s.procedures()) {
			p.genCode(code, new TempFactory());
		}
	}
	
	private int Procedure.numVars = 0;
	public int Procedure.addVar(IdDecl decl) {
		return numVars++;
	}
	
	private int Procedure.numParam = 0;
	public int Procedure.addPar(IdDecl decl) {
		return numParam++;
	}
		
	public void Procedure.genCode(Code code, TempFactory tempFactory, Procedure p) {
		// don't recurse into procedures
		return;
	}
	
	public void Procedure.genCode(Code code, TempFactory tempFactory) {
		
		code.addInstruction(new LabelDecl(label()));
		
		// Add Enter stmt and keep reference for backpatching sizes
		Enter enter;
		enter = new Enter(0, 0);
		code.addInstruction(enter);
		
		for(Param p : getParams()) {
			p.genCode(code, tempFactory, this);
		}
		
		for(Stmt t: getStmts()) {
			t.genCode(code, tempFactory, this);
		}
			
		enter.setTemps(tempFactory.getNumberOfTemps());
		enter.setVars(numVars);
	}
	
	abstract public void Stmt.genCode(Code code, TempFactory tempFactory, Procedure proc);
	
	public int IdDecl.varNum = Integer.MIN_VALUE;
	public Address IdDecl.genAddress(int blockLevel) {
		return new Variable(blockLevel-this.blockLevel, varNum);
	}
	
	public Address Param.genAddress(int blockLevel) {
		return new Parameter(blockLevel-this.blockLevel, varNum);
	}
		
	public void IdDecl.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		varNum = proc.addVar(this);
		if(hasExpr())
			code.addInstruction(new Move(
			getExpr().genExpr(code, tempFactory, proc.blockLevel()+1),
			new Variable(0, varNum)
		));
	}
	
	public void Param.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		varNum = proc.addPar(this);
		if(hasExpr())
			code.addInstruction(new Move(
				getExpr().genExpr(code, tempFactory, proc.blockLevel()+1),
				new Parameter(0, varNum)
		));
	}
	
	public void Assgn.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		
		code.addInstruction(new Move(
			getExpr().genExpr(code, tempFactory, proc.blockLevel()+1),
			getIdUse().decl().genAddress(proc.blockLevel()+1)
		));
	}

	public Operand IdUse.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		return decl().genAddress(blockLevel);
	}
	
	abstract Operand Expr.genExpr(Code code, TempFactory tempFactory, int blockLevel);
	public void IfStmt.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		String ifLabel = "if_" + code.ifStmts;
		String elseLabel = "else_" + code.ifStmts;
		String fiLabel = "fi_" + code.ifStmts;
		code.ifStmts++;
		
		// Initial condition checking
		Operand jmpCond = getExpr().genExpr(code, tempFactory, proc.blockLevel()+1);
		code.addInstruction(new JmpT(jmpCond, ifLabel));
		
		// Jump to fi or else part if it exists
		if(getNumElsePart() > 0)
			code.addInstruction(new Jmp(elseLabel));
		else 
			code.addInstruction(new Jmp(fiLabel));
		
		// Generate if part	
		code.addInstruction(new LabelDecl(ifLabel));
		for (Stmt s : getIfParts()) {
			s.genCode(code, tempFactory, proc);
		}
		code.addInstruction(new Jmp(fiLabel));
		
		// generate else part id exists
		if (getNumElsePart() > 0) {
			code.addInstruction(new LabelDecl(elseLabel));
			for (Stmt s : getElseParts()) {
				s.genCode(code, tempFactory, proc);
			}
			// jump explicitly, ev. removed by optimizer :)
			code.addInstruction(new Jmp(fiLabel));
		}
		
		code.addInstruction(new LabelDecl(fiLabel));
	}
	
	public void ExprStmt.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		getExpr().genExpr(code, tempFactory, proc.blockLevel()+1);
	}
	
	public void ForStmt.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		String loopLabel = "loop_" + code.forStmts;
		String endLoop = "endLoop_" + code.forStmts;
		code.forStmts++;
		getStmt().genCode(code, tempFactory, proc);
		code.addInstruction(new LabelDecl(loopLabel));
		Operand jmpCmp = getExpr().genExpr(code, tempFactory, proc.blockLevel()+1);
		code.addInstruction(new JmpT(jmpCmp, endLoop));
		for (Stmt t : getBodys()) {
			t.genCode(code, tempFactory, proc);
		}
		code.addInstruction(new Jmp(loopLabel));
		code.addInstruction(new LabelDecl(endLoop));
	}
	
	public void Ret.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		if(hasExpr())
			code.addInstruction(new Move(
				getExpr().genExpr(code, tempFactory, proc.blockLevel()+1),
				new Result()
		));
		code.addInstruction(new Return());
	}
	
	public void WriteInt.genCode(Code code, TempFactory tempFactory, Procedure proc) {
		code.addInstruction(new Alloc(1));
		code.addInstruction(new Move(
			getExpr().genExpr(code, tempFactory, proc.blockLevel()+1),
			new Argument(0)
		));
		code.addInstruction(new Call("writeint", 0));
		code.addInstruction(new Dealloc(1));
	}
	public void WriteLn.genCode(Code code, TempFactory tempfactory, Procedure proc) {
		code.addInstruction(new Call("writeln", 0));
	}
	
	public Operand Numeral.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		return new IntConst(getNUMERAL());
	}
	
	public Operand Bool.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		return new IntConst(getBOOL() ? "1" : "0");
	}
	
	public Operand Add.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntAdd(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		return res;
	}
	
	public Operand Sub.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntSub(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Mul.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntMul(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Div.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntDiv(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	
	public Operand And.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new BoolAnd(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	
	public Operand Eq.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntEq(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	
	public Operand Read.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		code.addInstruction(new Call("read", 0));
		return new Returned();
	}
		
	public Operand FuncCall.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		
		// Alloc params
		if(getNumArg() > 0)
			code.addInstruction(new Alloc(getNumArg()));
		
		// set params
		for(int i=0;  i<getNumArg(); i++) {
			code.addInstruction(
				new Move(getArg(i).genExpr(code, tempFactory, blockLevel),
				new Argument(i)
			));
		}
		
		code.addInstruction(new Call(decl().label(), blockLevel-decl().blockLevel()));
		
		// clean args
		if(getNumArg() > 0)
			code.addInstruction(new Dealloc(decl().getNumParam()));
			
		/*
		 * Store in temp since the result may be clobbered before we use it in
		 * a case such as func() + func()
		 */
		Address res = tempFactory.create();
		code.addInstruction(new Move(new Result(), res));
		return res;
	}
	
	public Operand Gt.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntGt(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Gte.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntGe(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Lt.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntLt(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Lte.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntLe(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Neg.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		return null;
	}
	public Operand Neq.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new IntNe(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Not.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new BoolNot(
			getOperand().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}
	public Operand Or.genExpr(Code code, TempFactory tempFactory, int blockLevel) {
		Address res = tempFactory.create();
		code.addInstruction(new BoolOr(
			getLeft().genExpr(code, tempFactory, blockLevel),
		 	getRight().genExpr(code, tempFactory, blockLevel),
		 	res
		 ));
		 	
		return res;
	}

	
	public Stmt ForStmt.getStmt(){
		return (Stmt)getChild(0);
	}
	public Expr ForStmt.getExpr(){
		return (Expr)getChild(1);
	}
}
