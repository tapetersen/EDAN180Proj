import semantic.*;

aspect NameAnalysis {
	
	public void Start.nameAnalysis(Semantic s) {
		gatherProcedures(s);
		super.nameAnalysis(s);
	}
	
	void ASTNode.nameAnalysis(Semantic s) {
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).nameAnalysis(s);
		}
	}
	
	protected int IdDecl.blockLevel = Integer.MIN_VALUE;
	/**
	 * Returns the procedural blockLevel. return of MIN_VALUE indicates bugs or that NameAnalysis wasn't run
	 */
	public int IdDecl.blockLevel() {
		return blockLevel;
	}
	
	void IdDecl.nameAnalysis(Semantic s) {
	
		// handle initializer without this binding;
		if(hasExpr())
			getExpr().nameAnalysis(s);
		
		blockLevel = s.blockLevel();
		s.addSymbol(this);
	}
	
	private String IdDecl.id = null;
	public String IdDecl.id() {
		if(id == null)
			id = getId().getID();
		return id;
	}
	
	private String Procedure.id = null;
	public String Procedure.id() {
		if(id == null)
			id = getId().getID();
		return id;
	}
	
	private Procedure FuncCall.declNode = null;
	public Procedure FuncCall.decl() {
		return declNode;
	}
	
	private IdDecl IdUse.declNode = null;
	public IdDecl IdUse.decl() {
		return declNode;
	}

	private Procedure Ret.proc = null;
	public Procedure Ret.proc() {
		return proc;
	}
	
	private Procedure Procedure.parentProc = null;
	public String Procedure.label() {
		if(parentProc != null)
			return parentProc.label()+"."+id();
		return id();
	}
	
	public void IdUse.nameAnalysis(Semantic s) {
		declNode = s.lookupSym(getId().getID());
		if(declNode == null)
			s.addError(new NameError("Id: "+getId().getID()+" not declared.", beginLine()));
	}
	
	private int Procedure.blockLevel = Integer.MIN_VALUE;
	public int Procedure.blockLevel() { return blockLevel; }
	public void Procedure.nameAnalysis(Semantic s) {
		parentProc = s.currentProcedure();
		s.enterProcedure(this);
		blockLevel = s.blockLevel();
		
		// gather the local procedures before analysis
		for (int k=0; k<getNumStmt(); k++) {
			getStmt(k).gatherProcedures(s);
		}
		
		super.nameAnalysis(s);
		s.exitProcedure();
	}
		
	public void Ret.nameAnalysis(Semantic s) {
		proc = s.currentProcedure();
	}
	
	public void FuncCall.nameAnalysis(Semantic s) {
		String id = getId().getID();
		declNode = s.lookupProc(id);
		if(declNode == null)
			s.addError(new NameError("Function: "+id+" not declared.", beginLine()));
			
		for(int i=0; i<getNumArg(); i++)
			getArg(i).nameAnalysis(s);
			
	}
	
	public void ASTNode.gatherProcedures(Semantic s) {
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).gatherProcedures(s);
		}
	}
	
	public void Procedure.gatherProcedures(Semantic s) {
		// just add the procedure for binding, don't recurse
		try {
			s.addProcedure(this);
		} catch (Exception e) {
			s.addError(new NameError(e.getMessage(), beginLine()));
		}
	}
}