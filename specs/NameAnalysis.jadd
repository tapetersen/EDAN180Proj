import semanticlib.SymbolTable;
import semantic.*;

aspect NameAnalysis {
	
	public void Start.nameAnalysis(Semantic s) {
		SymbolTable<String, IdDecl> table = new SymbolTable<String, IdDecl>();
		nameAnalysis(table, s);
		SymbolTable<String, Procedure> procTable = new SymbolTable<String, Procedure>();
		
		// gather toplevel procedures
		gatherProcedures(procTable, s);
		procAnalysis(procTable, s);
	}
	
	void ASTNode.nameAnalysis(SymbolTable<String, IdDecl> table, Semantic s) {
		table.enterBlock();
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).nameAnalysis(table, s);
		}
	}
		

	
	void IdDecl.nameAnalysis(SymbolTable<String, IdDecl> table, Semantic s) {
		super.nameAnalysis(table, s);
		try {
			table.add(getId().getID(), this);
		} catch(NameError e) {
			s.addError(e);
		}
	}
	
	private String IdDecl.id = null;
	public String IdDecl.id() {
		if(id == null)
			id = getId().getID();
		return id;
	}
	private String Procedure.id = null;
	public String Procedure.id() {
		if(id == null)
			id = getId().getID();
		return id;
	}
	
	private Procedure FuncCall.declNode = null;
	public Procedure FuncCall.decl() {
		return declNode;
	}
	
	private IdDecl IdUse.declNode = null;
	public IdDecl IdUse.decl() {
		return declNode;
	}
	
	void IdUse.nameAnalysis(SymbolTable<String, IdDecl> table, Semantic s) {
		declNode = table.lookup(getId().getID());
		if(declNode == null)
			s.addError(new NameError("Id: "+getId().getID()+" not declared."));
	}
	
	void Procedure.nameAnalysis(SymbolTable<String, IdDecl> table, Semantic s) {
	
		table.enterBlock();
		super.nameAnalysis(table, s);
		table.exitBlock();
	}
	
	void ASTNode.procAnalysis(SymbolTable<String, Procedure> table, Semantic s) {
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).gatherProcedures(table, s);
		}
	}
	
	void Procedure.procAnalysis(SymbolTable<String, Procedure> table, Semantic s) {
	
		// procedure should already be in table
		table.enterBlock();
		
		// gather the local procedures before analysis
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).gatherProcedures(table, s);
		}
		
		// recurse
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).procAnalysis(table, s);
		}
		
		table.exitBlock();
	}
	
	void FuncCall.procAnalysis(SymbolTable<String, Procedure> table, Semantic s) {
		declNode = table.lookup(getId().getID());
		if(declNode == null)
			s.addError(new NameError("Function: "+getId().getID()+" not declared."));
	}
	
	void ASTNode.gatherProcedures(SymbolTable<String, Procedure> table, Semantic s) {
		for (int k=0; k<getNumChild(); k++) {
			getChild(k).gatherProcedures(table, s);
		}
	}
	
	void Procedure.gatherProcedures(SymbolTable<String, Procedure> table, Semantic s) {
		// just add the procedure for binding, don't recurse
		table.enterBlock();
		try {
			table.add(id(), this);
		} catch (NameError e) {
			s.addError(e);
		}
	}
}