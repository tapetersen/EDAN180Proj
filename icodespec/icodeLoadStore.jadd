import util.*;
import java.util.*;
aspect icodeLoadStore {

  	public abstract void Operand.loadIn(String dest, AsmContext context, StringBuilder body);
  	public abstract void Address.store(AsmContext context, StringBuilder body);
  	
  	public void IntConst.loadIn(String dest, AsmContext context, StringBuilder body) {
  		TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("$"+getValue()+", "+dest);
  		body.append(""+buf+"\n");
  	}
  	
  	public void Argument.loadIn(String dest, AsmContext context, StringBuilder body) {
  		// always local, no level
  		TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append(""+context.getArgOffset(getNumber())+"(%ebp), "+dest);
  		body.append(""+buf+"\n");
  	}
  	
  	protected void Variable.followStatLinks(int levels, AsmContext context, StringBuilder body) {

  		TabbedBuffer buf = context.newLineBuf();
  	  	// save frame pointer if needed
  		if(levels > 0) {
  			buf.tabTo(1);
  			buf.append("movl ");
  			buf.tabTo(2);
  			buf.append("%ebp, %ecx");
  			body.append(""+buf+"\n");
  			buf.clear();
  		}
  			
  		// follow static links to get the right address
  		for(int i = levels; i > 0; i--) {
  			buf.tabTo(1);
  			buf.append("movl ");
  			buf.tabTo(2);
  			buf.append(""+context.getStatLinkOffset()+"(%ebp), %ebp");
  			body.append(""+buf+"\n");
  		}
  	}
  	
  	protected void Variable.restoreFramePointer(AsmContext context, StringBuilder body) {
  		TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("%ecx, %ebp");
  		body.append(""+buf+"\n");
  	}
  	
  	public void Variable.loadIn(String dest, AsmContext context, StringBuilder body) {
  	
  		TabbedBuffer buf = context.newLineBuf();
  		if(getLevels()>0)
  			followStatLinks(getLevels(), context, body);

  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append(""+context.getVarOffset(getNumber())+"(%ebp), "+dest);
  		body.append(""+buf+"\n");
  		
  		if(getLevels()>0)
  			restoreFramePointer(context, body);
  	}
  	
  	public void Parameter.loadIn(String dest, AsmContext context, StringBuilder body) {
  	
  		TabbedBuffer buf = context.newLineBuf();
  		if(getLevels()>0)
  			followStatLinks(getLevels(), context, body);

  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append(""+context.getParOffset(getNumber())+"(%ebp), "+dest);
  		body.append(""+buf+"\n");
  		
  		if(getLevels()>0)
  			restoreFramePointer(context, body);
  	}
  	
  	public void Result.loadIn(String dest, AsmContext context, StringBuilder body) {
  		if(dest.equals("%eax"))
  			return;
  		TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("%eax, "+dest);
  		body.append(""+buf+"\n");
    }
    
  	public void Returned.loadIn(String dest, AsmContext context, StringBuilder body) {
  	  	TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("%eax, "+dest);
  		body.append(""+buf+"\n");
    }
    
    public void Temp.loadIn(String dest, AsmContext context, StringBuilder body) {
      	TabbedBuffer buf = context.newLineBuf();
    	buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append(""+context.getTempOffset(getNumber())+"(%ebp), "+dest);
  		body.append(""+buf+"\n");
  	}
  	
  	
    public void Argument.store(AsmContext context, StringBuilder body) {
  		// always local, no level
  		TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("%eax, "+context.getArgOffset(getNumber())+"(%ebp)");
  		body.append(""+buf+"\n");
  	}
  	
  	
  	public void Variable.store(AsmContext context, StringBuilder body) {
  	
  		TabbedBuffer buf = context.newLineBuf();
  		if(getLevels()>0)
  			followStatLinks(getLevels(), context, body);

  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("%eax, "+context.getVarOffset(getNumber())+"(%ebp)");
  		body.append(""+buf+"\n");
  		
  		if(getLevels()>0)
  			restoreFramePointer(context, body);
  	}
  	
  	public void Parameter.store(AsmContext context, StringBuilder body) {
  	
  		TabbedBuffer buf = context.newLineBuf();
  		if(getLevels()>0)
  			followStatLinks(getLevels(), context, body);

  		buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("%eax, "+context.getParOffset(getNumber())+"(%ebp)");
  		body.append(""+buf+"\n");
  		
  		if(getLevels()>0)
  			restoreFramePointer(context, body);
  	}
  	
  	public void Result.store(AsmContext context, StringBuilder body) {
  		// shouldn't be stored, maybe should be error but it may be easier to leave as is
    }
    
  	public void Returned.store(AsmContext context, StringBuilder body) {
  	  	// shouldn't be stored, maybe should be error but it may be easier to leave as is
    }
    
    public void Temp.store(AsmContext context, StringBuilder body) {
      	TabbedBuffer buf = context.newLineBuf();
    	buf.tabTo(1);
  		buf.append("movl ");
  		buf.tabTo(2);
  		buf.append("%eax, "+context.getTempOffset(getNumber())+"(%ebp)");
  		body.append(""+buf+"\n");
  	}
    
}
    
