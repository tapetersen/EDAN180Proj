import util.*;
import java.util.*;
aspect icodeToAsm {


    public String Code.toAsm() {
    	StringBuilder body = new StringBuilder();
        AsmContext context = new AsmContext();
        TabbedBuffer buf = context.newLineBuf();
        buf.tabTo(1);
        buf.append(".text");
        body.append(""+buf+"\n");
        buf.clear();
        buf.tabTo(1);
        buf.append(".global main");
        body.append(""+buf+"\n");
        for (int i=0; i<getNumInstruction(); i++) {
            getInstruction(i).toAsm(context, body);
        }
        return body.toString();
    }
    
    public void Instruction.toAsm(AsmContext context, StringBuilder body) {
    	throw new UnsupportedOperationException();
    }
    
    public void LabelDecl.toAsm(AsmContext context, StringBuilder body) {
    	TabbedBuffer buf = context.newLineBuf();
    	buf.append(getLabel().toString()+":");
    	body.append(""+buf+"\n");
    }
    
    public void Alloc.toAsm(AsmContext context, StringBuilder body) {
    	TabbedBuffer buf = context.newLineBuf();
    	buf.tabTo(1);
        buf.append("subl ");
        buf.tabTo(2);
        buf.append("%esp, $" + getSize()*4);
    }
    
    public void Dealloc.toAsm(AsmContext context, StringBuilder body) {
    	TabbedBuffer buf = context.newLineBuf();
    	buf.tabTo(1);
        buf.append("addll ");
        buf.tabTo(2);
        buf.append("%esp, $" + getSize()*4);
    }
    
    public void Enter.toAsm(AsmContext context, StringBuilder body) {
    	context.setNumVars(getVars());
    	context.setNumTemps(getTemps());
    	TabbedBuffer buf = context.newLineBuf();
    	
    	// save dynlink
    	buf.tabTo(1);
    	buf.append("movl ");
    	buf.tabTo(2);
    	buf.append("%ebp, "+context.getDynLinkOffset()+"(%esp)");
    	buf.tabTo(3);
    	buf.append("# save dynlink");
    	body.append(""+buf+"\n");
    	buf.clear();
    	
    	// set framepointer
    	buf.tabTo(1);
    	buf.append("movl ");
    	buf.tabTo(2);
    	buf.append("%esp, %ebp");
    	buf.tabTo(3);
    	buf.append("# set framepointer");
    	body.append(""+buf+"\n");
    	buf.clear();
    	
    	// save statlink
    	buf.tabTo(1);
    	buf.append("movl ");
    	buf.tabTo(2);
    	buf.append("%ecx, "+context.getStatLinkOffset()+"(%ebp)");
    	buf.tabTo(3);
    	buf.append("# save statlink");
    	body.append(""+buf+"\n");
    	buf.clear();
    	
    	// allocate space
    	buf.tabTo(1);
    	buf.append("subl ");
    	buf.tabTo(2);
    	buf.append("$"+context.getRecordSize()+", %esp");
    	buf.tabTo(3);
    	buf.append("# allocate stackspace");
    	body.append(""+buf+"\n");
    }
    
    public void Return.toAsm(AsmContext context, StringBuilder body) {
    	TabbedBuffer buf = context.newLineBuf();
    	
    	// deallocate space
    	buf.tabTo(1);
    	buf.append("leal ");
    	buf.tabTo(2);
    	buf.append("(%ebp), %esp");
    	buf.tabTo(3);
    	buf.append("# restore stackpointer (dealloc)");
    	body.append(""+buf+"\n");
    	buf.clear();
    	
    	buf.tabTo(1);
    	buf.append("movl ");
    	buf.tabTo(2);
    	buf.append(""+context.getDynLinkOffset()+"(%ebp), %ebp");
    	buf.tabTo(3);
    	buf.append("# restore framepointer");
    	body.append(""+buf+"\n");
    	buf.clear();
    	
    	buf.tabTo(1);
    	buf.append("ret ");
    	body.append(""+buf+"\n");
    }
    
    public void Move.toAsm(AsmContext context, StringBuilder body) {
    	getOperand().loadIn("%eax", context, body);
    	getAddress().store(context, body);
  	}
  	
  	public void Call.toAsm(AsmContext context, StringBuilder body) {
  		TabbedBuffer buf = context.newLineBuf();
  		
  		// load statlink in %ecx
  		if(getLevels() > 0) {
  			// Same level as this function, use our statlink. May have been clobbered so load again
  			buf.tabTo(1);
  			buf.append("movl ");
  			buf.tabTo(2);
  			buf.append(""+context.getStatLinkOffset()+"(%ebp), %ecx");
  		} else {
  		  	buf.tabTo(1);
  			buf.append("movl ");
  			buf.tabTo(2);
  			buf.append("%ebp, %ecx");
  		}
  		body.append(""+buf+"\n");
  		buf.clear();
  		
  		buf.tabTo(1);
  		buf.append("call ");
  		buf.tabTo(2);
  		buf.append(getLabel());
  		body.append(""+buf+"\n");
  	}
  	
  	public void Instruction.storeResult(AsmContext context, StringBuilder body) {
  		throw new UnsupportedOperationException();
  	}
  	
  	public void BinOpr.storeResult(AsmContext context, StringBuilder body) {
  		// assumes it's in %eax, correct except for mod.
  		getAddress().store(context, body);
  	}
  	
  	public void UnOpr.storeResult(AsmContext context, StringBuilder body) {
  		// assumes it's in %eax, correct except for mod.
  		getAddress().store(context, body);
  	}
  	
  	public void UnOpr.loadOperands(AsmContext context, StringBuilder body) {
  		getOperand().loadIn("%eax", context, body);
  	}
  	
  	public void BinOpr.loadOperands(AsmContext context, StringBuilder body) {
  		getOperand1().loadIn("%eax", context, body);
  		getOperand2().loadIn("%edx", context, body);
  	}
  	
  	public void BoolOpr.toAsm(AsmContext context, StringBuilder body) {
  		loadOperands(context, body);
  		TabbedBuffer buf = context.newLineBuf();
  		
  		// compare
  		buf.tabTo(1);
  		buf.append("cmpl ");
  		buf.tabTo(2);
  		buf.append("%edx, %eax");
  		body.append(""+buf+"\n");
  		buf.clear();
  		
  		// Use setcc intruction
  		buf.tabTo(1);
  		buf.append(getAsmString()+" ");
  		buf.tabTo(2);
  		buf.append("%al");
  		body.append(""+buf+"\n");
  		buf.clear();
  		
  		// must clear upper bytes of %eax as setcc operations only operate on lowest byte
  		buf.tabTo(1);
  		buf.append("andl ");
  		buf.tabTo(2);
  		buf.append("$0xffffff00, %eax");
  		body.append(""+buf+"\n");
  		
  		storeResult(context, body);
  	}
  	
  	public void BinOpr.toAsm(AsmContext context, StringBuilder body) {
  		loadOperands(context, body);
  		TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append(getAsmString()+" ");
  		buf.tabTo(2);
  		buf.append("%edx, %eax");
  		body.append(""+buf+"\n");
  		storeResult(context, body);
  	}
  	
  	public String BinOpr.getAsmString() { throw new UnsupportedOperationException(); }
  	public String IntAdd.getAsmString() { return "addl"; }
  	public String IntMul.getAsmString() { return "imull"; }
  	public String IntDiv.getAsmString() { return "idivl"; }
  	public String IntNeg.getAsmString() { return "negl"; }
  	public String BoolAnd.getAsmString() { return "andl"; }
  	public String BoolOr.getAsmString() { return "orl"; }
  	public String IntEq.getAsmString() { return "sete"; }
  	public String IntNe.getAsmString() { return "setne"; }
  	public String IntLt.getAsmString() { return "setl"; }
  	public String IntLe.getAsmString() { return "setle"; }
  	public String IntGt.getAsmString() { return "setg"; }
  	public String IntGe.getAsmString() { return "setge"; }
  	
	public void BoolNot.toAsm(AsmContext context, StringBuilder body) {
  		loadOperands(context, body);
  		TabbedBuffer buf = context.newLineBuf();
  		buf.tabTo(1);
  		buf.append("xorl ");
  		buf.tabTo(2);
  		buf.append("$1, %eax");
  		body.append(""+buf+"\n");
  		storeResult(context, body);
  	}
  	
}
